// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: role.sql

package db

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO "role" (
    account_id, name
) VALUES (
    $1, $2
) RETURNING id, name, account_id
`

type CreateRoleParams struct {
	AccountID int64  `json:"account_id"`
	Name      string `json:"name"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.AccountID, arg.Name)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.AccountID)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM "role"
WHERE account_id = $1 AND id = $2
`

type DeleteRoleParams struct {
	AccountID int64 `json:"account_id"`
	ID        int64 `json:"id"`
}

func (q *Queries) DeleteRole(ctx context.Context, arg DeleteRoleParams) error {
	_, err := q.db.Exec(ctx, deleteRole, arg.AccountID, arg.ID)
	return err
}

const getRole = `-- name: GetRole :one
SELECT id, name, account_id FROM "role"
WHERE account_id = $1 AND id = $2 LIMIT 1
`

type GetRoleParams struct {
	AccountID int64 `json:"account_id"`
	ID        int64 `json:"id"`
}

func (q *Queries) GetRole(ctx context.Context, arg GetRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, getRole, arg.AccountID, arg.ID)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.AccountID)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT id, name, account_id FROM "role"
WHERE account_id = $1
ORDER BY name
LIMIT $2
OFFSET $3
`

type GetRolesParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) GetRoles(ctx context.Context, arg GetRolesParams) ([]Role, error) {
	rows, err := q.db.Query(ctx, getRoles, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name, &i.AccountID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
