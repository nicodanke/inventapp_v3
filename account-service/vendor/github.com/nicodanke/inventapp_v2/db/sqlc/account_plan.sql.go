// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: account_plan.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccountPlan = `-- name: CreateAccountPlan :one
INSERT INTO account_plan (
    plan_id, account_id, price
) VALUES (
    $1, $2, $3
) RETURNING id, plan_id, account_id, started_at, ended_at, price
`

type CreateAccountPlanParams struct {
	PlanID    int64   `json:"plan_id"`
	AccountID int64   `json:"account_id"`
	Price     float64 `json:"price"`
}

func (q *Queries) CreateAccountPlan(ctx context.Context, arg CreateAccountPlanParams) (AccountPlan, error) {
	row := q.db.QueryRow(ctx, createAccountPlan, arg.PlanID, arg.AccountID, arg.Price)
	var i AccountPlan
	err := row.Scan(
		&i.ID,
		&i.PlanID,
		&i.AccountID,
		&i.StartedAt,
		&i.EndedAt,
		&i.Price,
	)
	return i, err
}

const updateAccountPlan = `-- name: UpdateAccountPlan :one
UPDATE account_plan
SET
    ended_at = COALESCE($1, ended_at)
WHERE
    account_id = $2 AND ended_at IS NULL
RETURNING id, plan_id, account_id, started_at, ended_at, price
`

type UpdateAccountPlanParams struct {
	EndedAt   pgtype.Timestamptz `json:"ended_at"`
	AccountID int64              `json:"account_id"`
}

func (q *Queries) UpdateAccountPlan(ctx context.Context, arg UpdateAccountPlanParams) (AccountPlan, error) {
	row := q.db.QueryRow(ctx, updateAccountPlan, arg.EndedAt, arg.AccountID)
	var i AccountPlan
	err := row.Scan(
		&i.ID,
		&i.PlanID,
		&i.AccountID,
		&i.StartedAt,
		&i.EndedAt,
		&i.Price,
	)
	return i, err
}
