// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: service_inventapp-v1.proto

package pb

import (
	context "context"
	account "github.com/nicodanke/inventapp_v3/account-service/pb/requests/v1/account"
	login "github.com/nicodanke/inventapp_v3/account-service/pb/requests/v1/login"
	role "github.com/nicodanke/inventapp_v3/account-service/pb/requests/v1/role"
	user "github.com/nicodanke/inventapp_v3/account-service/pb/requests/v1/user"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventAppV1_Login_FullMethodName         = "/pb.InventAppV1/Login"
	InventAppV1_RefreshToken_FullMethodName  = "/pb.InventAppV1/RefreshToken"
	InventAppV1_CreateAccount_FullMethodName = "/pb.InventAppV1/CreateAccount"
	InventAppV1_UpdateAccount_FullMethodName = "/pb.InventAppV1/UpdateAccount"
	InventAppV1_GetUsers_FullMethodName      = "/pb.InventAppV1/GetUsers"
	InventAppV1_CreateUser_FullMethodName    = "/pb.InventAppV1/CreateUser"
	InventAppV1_DeleteUser_FullMethodName    = "/pb.InventAppV1/DeleteUser"
	InventAppV1_GetRoles_FullMethodName      = "/pb.InventAppV1/GetRoles"
	InventAppV1_CreateRole_FullMethodName    = "/pb.InventAppV1/CreateRole"
	InventAppV1_DeleteRole_FullMethodName    = "/pb.InventAppV1/DeleteRole"
)

// InventAppV1Client is the client API for InventAppV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventAppV1Client interface {
	// LOGIN
	Login(ctx context.Context, in *login.LoginRequest, opts ...grpc.CallOption) (*login.LoginResponse, error)
	RefreshToken(ctx context.Context, in *login.RefreshTokenRequest, opts ...grpc.CallOption) (*login.RefreshTokenResponse, error)
	// ACCOUNT
	CreateAccount(ctx context.Context, in *account.CreateAccountRequest, opts ...grpc.CallOption) (*account.CreateAccountResponse, error)
	UpdateAccount(ctx context.Context, in *account.UpdateAccountRequest, opts ...grpc.CallOption) (*account.UpdateAccountResponse, error)
	// USER
	GetUsers(ctx context.Context, in *user.GetUsersRequest, opts ...grpc.CallOption) (*user.GetUsersResponse, error)
	CreateUser(ctx context.Context, in *user.CreateUserRequest, opts ...grpc.CallOption) (*user.CreateUserResponse, error)
	DeleteUser(ctx context.Context, in *user.DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ROLE
	GetRoles(ctx context.Context, in *role.GetRolesRequest, opts ...grpc.CallOption) (*role.GetRolesResponse, error)
	CreateRole(ctx context.Context, in *role.CreateRoleRequest, opts ...grpc.CallOption) (*role.CreateRoleResponse, error)
	DeleteRole(ctx context.Context, in *role.DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type inventAppV1Client struct {
	cc grpc.ClientConnInterface
}

func NewInventAppV1Client(cc grpc.ClientConnInterface) InventAppV1Client {
	return &inventAppV1Client{cc}
}

func (c *inventAppV1Client) Login(ctx context.Context, in *login.LoginRequest, opts ...grpc.CallOption) (*login.LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(login.LoginResponse)
	err := c.cc.Invoke(ctx, InventAppV1_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventAppV1Client) RefreshToken(ctx context.Context, in *login.RefreshTokenRequest, opts ...grpc.CallOption) (*login.RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(login.RefreshTokenResponse)
	err := c.cc.Invoke(ctx, InventAppV1_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventAppV1Client) CreateAccount(ctx context.Context, in *account.CreateAccountRequest, opts ...grpc.CallOption) (*account.CreateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(account.CreateAccountResponse)
	err := c.cc.Invoke(ctx, InventAppV1_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventAppV1Client) UpdateAccount(ctx context.Context, in *account.UpdateAccountRequest, opts ...grpc.CallOption) (*account.UpdateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(account.UpdateAccountResponse)
	err := c.cc.Invoke(ctx, InventAppV1_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventAppV1Client) GetUsers(ctx context.Context, in *user.GetUsersRequest, opts ...grpc.CallOption) (*user.GetUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(user.GetUsersResponse)
	err := c.cc.Invoke(ctx, InventAppV1_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventAppV1Client) CreateUser(ctx context.Context, in *user.CreateUserRequest, opts ...grpc.CallOption) (*user.CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(user.CreateUserResponse)
	err := c.cc.Invoke(ctx, InventAppV1_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventAppV1Client) DeleteUser(ctx context.Context, in *user.DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventAppV1_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventAppV1Client) GetRoles(ctx context.Context, in *role.GetRolesRequest, opts ...grpc.CallOption) (*role.GetRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(role.GetRolesResponse)
	err := c.cc.Invoke(ctx, InventAppV1_GetRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventAppV1Client) CreateRole(ctx context.Context, in *role.CreateRoleRequest, opts ...grpc.CallOption) (*role.CreateRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(role.CreateRoleResponse)
	err := c.cc.Invoke(ctx, InventAppV1_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventAppV1Client) DeleteRole(ctx context.Context, in *role.DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventAppV1_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventAppV1Server is the server API for InventAppV1 service.
// All implementations must embed UnimplementedInventAppV1Server
// for forward compatibility.
type InventAppV1Server interface {
	// LOGIN
	Login(context.Context, *login.LoginRequest) (*login.LoginResponse, error)
	RefreshToken(context.Context, *login.RefreshTokenRequest) (*login.RefreshTokenResponse, error)
	// ACCOUNT
	CreateAccount(context.Context, *account.CreateAccountRequest) (*account.CreateAccountResponse, error)
	UpdateAccount(context.Context, *account.UpdateAccountRequest) (*account.UpdateAccountResponse, error)
	// USER
	GetUsers(context.Context, *user.GetUsersRequest) (*user.GetUsersResponse, error)
	CreateUser(context.Context, *user.CreateUserRequest) (*user.CreateUserResponse, error)
	DeleteUser(context.Context, *user.DeleteUserRequest) (*emptypb.Empty, error)
	// ROLE
	GetRoles(context.Context, *role.GetRolesRequest) (*role.GetRolesResponse, error)
	CreateRole(context.Context, *role.CreateRoleRequest) (*role.CreateRoleResponse, error)
	DeleteRole(context.Context, *role.DeleteRoleRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedInventAppV1Server()
}

// UnimplementedInventAppV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventAppV1Server struct{}

func (UnimplementedInventAppV1Server) Login(context.Context, *login.LoginRequest) (*login.LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedInventAppV1Server) RefreshToken(context.Context, *login.RefreshTokenRequest) (*login.RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedInventAppV1Server) CreateAccount(context.Context, *account.CreateAccountRequest) (*account.CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedInventAppV1Server) UpdateAccount(context.Context, *account.UpdateAccountRequest) (*account.UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedInventAppV1Server) GetUsers(context.Context, *user.GetUsersRequest) (*user.GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedInventAppV1Server) CreateUser(context.Context, *user.CreateUserRequest) (*user.CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedInventAppV1Server) DeleteUser(context.Context, *user.DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedInventAppV1Server) GetRoles(context.Context, *role.GetRolesRequest) (*role.GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedInventAppV1Server) CreateRole(context.Context, *role.CreateRoleRequest) (*role.CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedInventAppV1Server) DeleteRole(context.Context, *role.DeleteRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedInventAppV1Server) mustEmbedUnimplementedInventAppV1Server() {}
func (UnimplementedInventAppV1Server) testEmbeddedByValue()                     {}

// UnsafeInventAppV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventAppV1Server will
// result in compilation errors.
type UnsafeInventAppV1Server interface {
	mustEmbedUnimplementedInventAppV1Server()
}

func RegisterInventAppV1Server(s grpc.ServiceRegistrar, srv InventAppV1Server) {
	// If the following call pancis, it indicates UnimplementedInventAppV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventAppV1_ServiceDesc, srv)
}

func _InventAppV1_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(login.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventAppV1Server).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventAppV1_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventAppV1Server).Login(ctx, req.(*login.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventAppV1_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(login.RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventAppV1Server).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventAppV1_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventAppV1Server).RefreshToken(ctx, req.(*login.RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventAppV1_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventAppV1Server).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventAppV1_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventAppV1Server).CreateAccount(ctx, req.(*account.CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventAppV1_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventAppV1Server).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventAppV1_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventAppV1Server).UpdateAccount(ctx, req.(*account.UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventAppV1_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventAppV1Server).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventAppV1_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventAppV1Server).GetUsers(ctx, req.(*user.GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventAppV1_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventAppV1Server).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventAppV1_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventAppV1Server).CreateUser(ctx, req.(*user.CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventAppV1_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventAppV1Server).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventAppV1_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventAppV1Server).DeleteUser(ctx, req.(*user.DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventAppV1_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(role.GetRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventAppV1Server).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventAppV1_GetRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventAppV1Server).GetRoles(ctx, req.(*role.GetRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventAppV1_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(role.CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventAppV1Server).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventAppV1_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventAppV1Server).CreateRole(ctx, req.(*role.CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventAppV1_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(role.DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventAppV1Server).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventAppV1_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventAppV1Server).DeleteRole(ctx, req.(*role.DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventAppV1_ServiceDesc is the grpc.ServiceDesc for InventAppV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventAppV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.InventAppV1",
	HandlerType: (*InventAppV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _InventAppV1_Login_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _InventAppV1_RefreshToken_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _InventAppV1_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _InventAppV1_UpdateAccount_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _InventAppV1_GetUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _InventAppV1_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _InventAppV1_DeleteUser_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _InventAppV1_GetRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _InventAppV1_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _InventAppV1_DeleteRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_inventapp-v1.proto",
}
