// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: plan.sql

package db

import (
	"context"
)

const getplan = `-- name: Getplan :one
SELECT id, name FROM plan
WHERE id = $1 LIMIT 1
`

func (q *Queries) Getplan(ctx context.Context, id int64) (Plan, error) {
	row := q.db.QueryRow(ctx, getplan, id)
	var i Plan
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listPlans = `-- name: ListPlans :many
SELECT id, name FROM plan
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListPlansParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPlans(ctx context.Context, arg ListPlansParams) ([]Plan, error) {
	rows, err := q.db.Query(ctx, listPlans, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Plan{}
	for rows.Next() {
		var i Plan
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
