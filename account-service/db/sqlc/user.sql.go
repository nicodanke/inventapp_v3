// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
    account_id, name, lastname, email, username, password, phone, is_admin, role_id, active
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, username, password, name, lastname, email, phone, active, is_admin, created_at, updated_at, password_changed_at, role_id, account_id
`

type CreateUserParams struct {
	AccountID int64       `json:"account_id"`
	Name      string      `json:"name"`
	Lastname  string      `json:"lastname"`
	Email     string      `json:"email"`
	Username  string      `json:"username"`
	Password  string      `json:"password"`
	Phone     pgtype.Text `json:"phone"`
	IsAdmin   bool        `json:"is_admin"`
	RoleID    int64       `json:"role_id"`
	Active    bool        `json:"active"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.AccountID,
		arg.Name,
		arg.Lastname,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.Phone,
		arg.IsAdmin,
		arg.RoleID,
		arg.Active,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Lastname,
		&i.Email,
		&i.Phone,
		&i.Active,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordChangedAt,
		&i.RoleID,
		&i.AccountID,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE account_id = $1 AND id = $2
`

type DeleteUserParams struct {
	AccountID int64 `json:"account_id"`
	ID        int64 `json:"id"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.Exec(ctx, deleteUser, arg.AccountID, arg.ID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, name, lastname, email, phone, active, is_admin, created_at, updated_at, password_changed_at, role_id, account_id FROM "user"
WHERE account_id = $1 AND id = $2 LIMIT 1
`

type GetUserParams struct {
	AccountID int64 `json:"account_id"`
	ID        int64 `json:"id"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRow(ctx, getUser, arg.AccountID, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Lastname,
		&i.Email,
		&i.Phone,
		&i.Active,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordChangedAt,
		&i.RoleID,
		&i.AccountID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, name, lastname, email, phone, active, is_admin, created_at, updated_at, password_changed_at, role_id, account_id FROM "user"
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Lastname,
		&i.Email,
		&i.Phone,
		&i.Active,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordChangedAt,
		&i.RoleID,
		&i.AccountID,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, password, name, lastname, email, phone, active, is_admin, created_at, updated_at, password_changed_at, role_id, account_id FROM "user"
WHERE account_id = $1
ORDER BY name, lastname
LIMIT $2
OFFSET $3
`

type GetUsersParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Name,
			&i.Lastname,
			&i.Email,
			&i.Phone,
			&i.Active,
			&i.IsAdmin,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PasswordChangedAt,
			&i.RoleID,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
